import asyncio
from aiogram import Bot, Dispatcher, executor, types
from config import BOT_TOKEN, admin_id, REVIEW_CHANNEL
from db import Database
from markups import mainMenu, keyboard, rust, solution, madina, ans, adminlink, feedback, nodemo, otziv
from states import Buy, Answer, Sub, Add, Del, Ch
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta

loop = asyncio.new_event_loop()
bot = Bot(BOT_TOKEN, parse_mode='HTML')

dp = Dispatcher(bot, loop=loop, storage=MemoryStorage())
db = Database('db.db')

@dp.message_handler(commands=['start'], state='*')
async def start(message: types.Message, state: FSMContext):
    await state.finish()
    if message.from_user.id == admin_id:
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ!', reply_markup=adminlink)
    else:
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫!üëã\n–í –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ–ª—å—à–æ–º —Å–±–æ—Ä–Ω–∏–∫–µ –≤–∏–ø –≥—Ä—É–ø–ø.\n–ù–∞–ø—Ä–∏–º–µ—Ä, —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã, –æ–ø–ª–∞—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –¥–æ—Å—Ç—É–ø, –∞ —Ç–∞–∫–∂–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n–ú–´ –¥–∞–µ–º –í–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 15.000$ –µ–∂–µ–º–µ—Å—è—á–Ω–æ ü§ë', reply_markup=mainMenu)

#####ADMIN_PANEL#####
@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É")
async def add_link(message: types.Message):
    link = db.ch()
    await bot.send_message(message.from_user.id, f'–ü—Ä–æ—à–ª–∞—è —Å—Å—ã–ª–∫–∞: {link[0]}')
    await bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É', reply_markup=None)
    await Add.l1.set()

@dp.message_handler(state=Add.l1)
async def link(message: types.Message, state: FSMContext):
    link = message.text
    db.add_link(link)
    await bot.send_message(message.from_user.id, f'–ù–∞ –¥–∞–Ω–Ω–æ–º –º–æ–º–µ–Ω—Ç–µ —Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –≤–æ—Ç —Ç–∞–∫: {link}', reply_markup=adminlink)
    await state.reset_state(with_data=False)

@dp.message_handler(lambda message: message.text == "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
async def del_user(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:', reply_markup=None)
    await Del.d1.set()

@dp.message_handler(state=Del.d1)
async def delete_us(message: types.Message, state: FSMContext):
    del_id = message.text
    channel = db.channel_name()
    try:
        for i in channel:
            await bot.kick_chat_member(i[:][2], del_id)
            await bot.unban_chat_member(i[:][2], del_id)
    except:
        pass
    await bot.send_message(message.from_user.id, f'–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤')
    await state.reset_state(with_data=False)

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_ch(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ –∏–º—è –∫–∞–Ω–∞–ª–∞:', reply_markup=None)
    await Ch.c1.set()

@dp.message_handler(state=Ch.c1)
async def chan(message: types.Message, state: FSMContext):
    channel = message.text
    await state.update_data(channel=channel)
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏ id –∫–∞–Ω–∞–ª–∞:', reply_markup=None)
    await Ch.c2.set()

@dp.message_handler(state=Ch.c2)
async def idchan(message: types.Message, state: FSMContext):
    id_ch = message.text
    data = await state.get_data()
    name = data.get('channel')
    db.add_channel(name, id_ch)
    await bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –∫–∞–Ω–∞–ª', reply_markup=None)
    await state.finish()
#####/ADMIN_PANEL#####

@dp.message_handler(lambda message: message.text == "‚ÅâÔ∏èFAQ", state='*')
async def faq(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id, '–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n'
                           '1. –ö—Ç–æ –º—ã —Ç–∞–∫–∏–µ? –ü–æ—á–µ–º—É –Ω–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å?\n–ú–´ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è —Å–∫–ª–∞–¥—á–∏–Ω–∞ –°–ù–ì, –∫–æ—Ç–æ—Ä–∞—è –¥–∞–µ—Ç –¥–æ—Å—Ç—É–ø –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∫ –±–æ–ª–µ–µ 50 VIP –∫–∞–Ω–∞–ª–∞–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤/–±–ª–æ–≥–µ—Ä–æ–≤.\n'
                           '2. –í –∫–∞–∫–∏–µ –≤–∏–ø –≥—Ä—É–ø–ø—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø?\n–í—Å–µ –≥—Ä—É–ø–ø—ã –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –±–æ—Ç–µ, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É: ¬´VIP–∫–∏¬ª. –ò—Ö –æ—á–µ–Ω—å –º–Ω–æ–≥–æüòÅ\n'
                           '3. –£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏?\n–ù–∞—à –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–≤–µ–¥–µ–Ω—ã –∫ –º–∏–Ω–∏–º—É–º—É. ‚è≥\n'
                           '4. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –ª–∏ –≤—ã —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã?\n–†—è–¥ –∫—É—Ä—Å–æ–≤ –º—ã –¥–∞–µ–º –±–æ–Ω—É—Å–æ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–º, –∫—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª –Ω–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å—Ä–æ–∫ 3 –∏–ª–∏ 6 –º–µ—Å—è—Ü–µ–≤. üìö\n'
                           '5. –ö–∞–∫–∞—è —Ü–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–∞–∫–∏–µ –µ—Å—Ç—å —Ç–∞—Ä–∏—Ñ—ã –∏ –∫–∞–∫ –µ–µ –æ—Ñ–æ—Ä–º–∏—Ç—å?\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å —Ç—Ä–∏ —Ç–∞—Ä–∏—Ñ—ã:\n'
                           'üîπ1 –º–µ—Å—è—Ü - 70$\nüîπ3 –º–µ—Å—è—Ü–∞ - 160$\nüîπ1 –≥–æ–¥ - 450$\n'
                           '–ù–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –≤ —ç—Ç–æ–º –±–æ—Ç–µ –≤ –ø—É–Ω–∫—Ç–µ "–¢–∞—Ä–∏—Ñ—ã".\n'
                           '6. –Ø –Ω–æ–≤–∏—á–æ–∫, –Ω–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∏ –∫–∞–∫ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å, —á—Ç–æ –ø–æ—Å–æ–≤–µ—Ç—É–µ—Ç–µ?\n–í–∞–º –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞—Ä–∏—Ñ 3/6 –º–µ—Å—è—Ü–µ–≤, –∏ –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –æ–±—É—á–∞—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª. –í—ã —Å–º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –æ–Ω–∏ —Å–º–æ–≥—É—Ç –≤–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å.\n'
                           '7. –ö–∞–∫ —è –º–æ–≥—É —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏, –µ—Å–ª–∏ —É –º–µ–Ω—è –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?\n–ù–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º, –ø–∏—à–∏—Ç–µ —Å—é–¥–∞:\n@cryptohouse_adm', reply_markup=mainMenu)

@dp.message_handler(lambda message: message.text == "VIP –ö–∞–Ω–∞–ª—ã", state='*')
async def faq(message: types.Message, state: FSMContext):
    await state.finish()
    channel = db.channel_name()
    vip_chanel = []
    for i in channel:
        vip_chanel.append(f'‚Äî*{i[:][1]}*\n')
    await bot.send_message(message.from_user.id, ''.join(vip_chanel), parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == "–û—Ç–∑—ã–≤—ã", state='*')
async def reviews(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.unban_chat_member(REVIEW_CHANNEL, message.from_user.id)
    link = await bot.export_chat_invite_link(REVIEW_CHANNEL)
    await bot.send_message(message.from_user.id, '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ‚§µÔ∏è', reply_markup=otziv)

#####FEEDBACK#####
@dp.message_handler(lambda message: message.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", state='*')
async def answer(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    await Answer.a1.set()

@dp.message_handler(state=Answer.a1)
async def text(message: types.Message, state: FSMContext):
    text = message.text
    id = message.from_user.id
    await state.update_data(text=text)
    await state.update_data(id=id)
    await bot.send_message(message.from_user.id, '–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å', reply_markup=feedback)


@dp.callback_query_handler(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', state=Answer.a1)
async def send_text(callback:types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get('text')
    id = data.get('id')
    await bot.send_message(admin_id, f'–í–ê–ú –í–û–ü–†–û–° –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n{text}')
    await bot.send_message(admin_id, f'{id}', reply_markup=ans)
    await bot.send_message(callback.message.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.')
    await state.reset_state(with_data=False)

@dp.callback_query_handler(text='–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ', state=Answer.a1)
async def send_photo(callback:types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback.message.chat.id, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ')
    await Answer.a2.set()

@dp.message_handler(state=Answer.a2, content_types=types.ContentType.PHOTO)
async def feed_photo(message: types.Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    data = await state.get_data()
    text = data.get('text')
    id = data.get('id')
    await bot.send_photo(admin_id, photo=photo, caption=f'–í–ê–ú –í–û–ü–†–û–° –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø\n{text}')
    await bot.send_message(admin_id, f'{id}', reply_markup=ans)
    await bot.send_message(message.from_user.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.')

@dp.callback_query_handler(text='–ò–≥–Ω–æ—Ä')
async def admin_ignor(callback:types.CallbackQuery, state: FSMContext):
    user_id = callback.message.text
    await bot.send_message(user_id, f'–ê–¥–º–∏–Ω –Ω–µ –ø–æ–Ω—è–ª –≤–æ–ø—Ä–æ—Å–∞.\n–û—Ç–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    await bot.send_message(admin_id, f'–í—ã –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}')

@dp.callback_query_handler(text='–û—Ç–≤–µ—Ç–∏—Ç—å')
async def admin_answer(callback:types.CallbackQuery, state: FSMContext):
    user_id = callback.message.text
    await state.update_data(user_id=user_id)
    await bot.send_message(admin_id, f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç')
    await Answer.a3.set()

@dp.message_handler(state=Answer.a3)
async def admin_text(message: types.Message, state: FSMContext):
    admin_text = message.text
    await state.update_data(admin_text=admin_text)
    data = await state.get_data()
    user_id = data['user_id']
    await state.reset_state(with_data=False)
    await bot.send_message(user_id, f'–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n<b>{admin_text}</b>\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ ¬´–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å¬ª')
    await bot.send_message(admin_id, f'–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')
#####/FEEDBACK#####

#####SUBSCRIBE#####
@dp.message_handler(lambda message: message.text == "–¢–∞—Ä–∏—Ñ—ã")
async def rates(message: types.Message):
    if db.user_exists(message.from_user.id):
        date = str(db.get_next_date(message.from_user.id))
        change_date = date[10:12]+'.'+date[7:9]+'.'+date[2:6]
        await bot.send_message(message.from_user.id, f'–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω, –æ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {change_date}', reply_markup=mainMenu)
    else:
        await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', reply_markup=keyboard)
        await Buy.r1.set()

#####DEMO#####
@dp.callback_query_handler(text='–î–µ–º–æ', state=Buy.r1)
async def demo(message: types.Message, state: FSMContext):
    await state.finish()
    if not db.demo_exists(message.from_user.id):
        us_id = message.from_user.id
        db.add_demo(message.from_user.id)
        channel = db.channel_limit()
        text_chanel = []
        link = db.ch()
        markup = InlineKeyboardMarkup(row_width=1,
                                  inline_keyboard=[
                                      [
                                          InlineKeyboardButton(text='–ö–∞–Ω–∞–ª—ã', url=f'{link[0]}')
                                      ]
                                  ])
        bb = await bot.send_message(us_id, '–î–µ–º–æ –¥–æ—Å—Ç—É–øüéÅ\n–°—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏: 3 –ß–ê–°–ê\n\n –í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–∞–º', reply_markup=markup)
        now = datetime.now()
        del_msg = now + timedelta(minutes=1)
        del_ch = now + timedelta(hours=3)
        scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
        scheduler.add_job(delete_msg_demo, 'date', run_date=f'{del_msg}', args=(bot, us_id, bb))
        scheduler.add_job(delete_demo, 'date', run_date=f'{del_ch}', args=(bot, message.from_user.id))
        scheduler.start()
    else:
        await bot.send_message(message.from_user.id, '–£ –≤–∞—Å —É–∂–µ –±—ã–ª –¥–µ–º–æ –¥–æ—Å—Ç—É–ø.', reply_markup=nodemo)
        await Buy.r1.set()
#####/DEMO#####

@dp.callback_query_handler(state=Buy.r1)
async def fstate(callback:types.CallbackQuery, state: FSMContext):
    answer = callback.data
    await state.update_data(answer1=answer)
    await Buy.next()
    await callback.message.edit_text(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: \n{answer}', reply_markup=rust)

@dp.callback_query_handler(text='back', state='*')
async def cancel(callback:types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:', reply_markup=keyboard)
    await Buy.r1.set()

@dp.callback_query_handler(state=Buy.r2)
async def state(callback:types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    answer1 = data.get('answer1')
    answer2 = callback.data
    await state.update_data(answer2=answer2)
    await Buy.next()
    await callback.message.edit_text(f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ‚§µÔ∏è\n\n*{answer1[-4:]} {answer2}*\n\n_üîπ–Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –∫–æ–º–∏—Å—Å–∏—é —Å–µ—Ç–∏, –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∂–µ —Å—á—ë—Ç._\n\n`TNePNqzub7GWzr2cxfeUTAzPFwuTpyoRWE`\n\n_(–Ω–∞–∂–º–∏ –Ω–∞ —Ç–µ–∫—Å—Ç —á—Ç–æ –±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)_\n–ü–æ–∫—É–ø–∞—è –ø–æ–¥–ø–∏—Å–∫—É, —è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª, –ø—Ä–∏–Ω—è–ª –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å [–ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º](https://t.me/c/1938998371/4) ‚ùóÔ∏è\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∞ –¥–æ–π–¥—ë—Ç –¥–æ –Ω–∞—Å, –º—ã –¥–æ–±–∞–≤–∏–º –í–∞—Å –≤ –Ω–∞—à–∏ –≥—Ä—É–ø–ø—ã.', reply_markup=solution, parse_mode='Markdown')

@dp.callback_query_handler(text='–Ø –æ–ø–ª–∞—Ç–∏–ª', state=Buy.r3)
async def add_photo(callback: types.CallbackQuery):
    await callback.message.answer('üí∞ –û–ø–ª–∞—Ç–∏–ª–∏?\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ: —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ. –ù–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã: –¥–∞—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞. –ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞')
    await Buy.r3.set()

@dp.message_handler(state=Buy.r3, content_types=types.ContentType.PHOTO)
async def photo(message: types.Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id #–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–∞–∏–ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    await state.update_data(photo=photo_file_id)
    await state.update_data(id=message.from_user.id)
    await state.update_data(username=message.from_user.username)
    data = await state.get_data()
    answer1 = data.get('answer1')
    answer2 = data.get('answer2')
    answer3 = data.get('photo')
    answer4 = data.get('id')
    answer5 = data.get('username')
    if db.user_exists(answer4):
        db.update_user(answer4, answer1, answer2, answer3, answer5)
    else:
        db.add_user(answer4, answer1, answer2, answer3, answer5)
    await state.reset_state(with_data=False)
    await bot.send_photo(admin_id, photo=answer3, caption=f'{answer1}\n{answer2}\n{answer5}')
    await bot.send_message(admin_id, text=f'{answer4}', reply_markup=madina)
    await bot.send_message(answer4, text='–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤, –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–ø–∫–∏ —Å–æ –≤—Å–µ–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏–∑ –Ω–∞—à–µ–π –ø–æ–¥–±–æ—Ä–∫–∏.\n\n<i>–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏ , –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç. –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ , –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!</i>', reply_markup=mainMenu)

@dp.callback_query_handler(text='add')
async def add_user(callback: types.CallbackQuery):
    us_id = callback.message.text
    user = db.set_date(us_id)
    link = db.ch()
    next_date = db.get_next_date(us_id)[0]
    now = datetime.now()
    delete_now = now + timedelta(minutes=5)
    markup = InlineKeyboardMarkup(row_width=1,
                                  inline_keyboard=[
                                      [
                                          InlineKeyboardButton(text='–ö–∞–Ω–∞–ª—ã', url=f'{link[0]}')
                                      ]
                                  ])
    bb = await bot.send_message(us_id, '–ü–µ—Ä–µ–π—Ç–∏', reply_markup=markup)
    scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
    scheduler.add_job(delete_msg, 'date', run_date=f'{delete_now}', args=(bot, us_id, bb))
    scheduler.add_job(delete_time, run_date=f'{next_date}', args=(bot, us_id))
    scheduler.start()

@dp.callback_query_handler(text='delete')
async def delete(callback: types.CallbackQuery):
    us_id = callback.message.text
    db.delete_user(us_id)
    await bot.send_message(us_id, '–ù–µ –≤–µ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã. –ò–ª–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É.', reply_markup=mainMenu)
#####/SUBSCRIBE#####

#####TIME_DELETE#####
@dp.message_handler()
async def delete_time(message: types.Message, us_id):
    db.delete_user(us_id)
    channel = db.channel_name()
    try:
        for i in channel:
            await bot.kick_chat_member(i[:][2], us_id)
            await bot.unban_chat_member(i[:][2], us_id)
    except:
        pass
    await bot.send_message(us_id, f'–í–∞—à–µ –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏—à–ª–∞ –∫ –∫–æ–Ω—Ü—É, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫–∞–Ω–∞–ª–∞—Ö –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.', reply_markup=mainMenu)

@dp.message_handler()
async def delete_demo(message: types.Message, us_id):
    channel = db.channel_name()
    try:
        for i in channel:
            await bot.kick_chat_member(i[:][2], us_id)
            await bot.unban_chat_member(i[:][2], us_id)
    except:
        pass
    await bot.send_message(us_id, f'–í–∞—à–µ –≤—Ä–µ–º—è –ø—Ä–æ–±–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏—à–ª–æ –∫ –∫–æ–Ω—Ü—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.', reply_markup=mainMenu)


@dp.message_handler()
async def delete_msg(message: types.Message, user_id, bb):
    await bot.delete_message(user_id, bb.message_id)

@dp.message_handler()
async def delete_msg_demo(message: types.Message, user_id, bb):
    await bot.delete_message(user_id, bb.message_id)
#####/TIME_DELETE#####


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
